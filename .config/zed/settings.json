{
	"buffer_font_family": "GeistMono Nerd Font",
	"indent_guides": {
		"enabled": true,
		"coloring": "indent_aware"
	},
	"centered_layout": {
		"left_padding": 0.15,
		"right_padding": 0.15
	},
	"inlay_hints": {
		"enabled": false
	},
	"features": {
		"inline_completion_provider": "none"
	},
	"languages": {
		"Markdown-Inline": {
			"show_inline_completions": false
		},
		"Markdown": {
			"show_inline_completions": true
		}
	},
	"hard_tabs": true,
	"project_panel": {
		"auto_fold_dirs": false,
		"button": true,
		"dock": "right",
		"git_status": true
	},
	"soft_wrap": "editor_width",
	"inline_completions": {
		"disabled_globs": [".env", "test.go", ".md", "diagram.dsl"]
	},
	"scrollbar": {
		"git_diff": false,
		"search_results": false,
		"selected_symbol": false,
		"diagnostics": false
	},
	"telemetry": {
		"diagnostics": false,
		"metrics": false
	},
	"diagnostics": {
		// Whether to show warnings or not by default.
		"include_warnings": false
	},
	"gutter": {
		// Whether to show line numbers in the gutter.
		"line_numbers": true,
		// Whether to show code action buttons in the gutter.
		"code_actions": false,
		// Whether to show runnables buttons in the gutter.
		"runnables": false,
		// Whether to show fold buttons in the gutter.
		"folds": false
	},
	"vim_mode": false,
	"ui_font_size": 18,
	"buffer_font_size": 18,
	"theme": {
		"mode": "system",
		"light": "Catppuccin Mocha",
		"dark": "Catppuccin Mocha"
	},
	"preview_tabs": {
		"enabled": false,
		"enable_preview_from__file_finder": false,
		"enable_preview_from_code_navigation": false
	},
	"git": {
		"git_gutter": "hide",
		"inline_blame": {
			"enabled": false
		}
	},
	"toolbar": {
		// Whether to show breadcrumbs.
		"breadcrumbs": false,
		// Whether to show quick action buttons.
		"quick_actions": false,
		// Whether to show the Selections menu in the editor toolbar
		"selections_menu": false
	},
	"lsp": {
		"yaml-language-server": {
			"settings": {
				"yaml": {
					"schemaStore": {
						"enable": false
					}
				}
			}
		}
	},
	"assistant": {
		// Version of this setting.
		"version": "2",
		// Whether the assistant is enabled.
		"enabled": false
	},
	// "formatter": "prettier",
	"outline_panel": {
		"button": false
	},
	"collaboration_panel": {
		// Whether to show the collaboration panel button in the status bar.
		"button": false
	},
	"chat_panel": {
		// Whether to show the chat panel button in the status bar.
		"button": false
	},
	"notification_panel": {
		// Whether to show the notification panel button in the status bar.
		"button": false
	},
	"task": {
		// Whether to show task status indicator in the status bar. Default: true
		"show_status_indicator": false
	},
	"line_indicator_format": "short",
	"terminal": {
		"shell": {
			"program": "zsh"
		},
		"dock": "bottom",
		// Default width when the terminal is docked to the left or right.
		"default_width": 640,
		// Default height when the terminal is docked to the bottom.
		"default_height": 320,
		"working_directory": "current_project_directory",
		"blinking": "terminal_controlled",
		// Default cursor shape for the terminal.
		//  1. A block that surrounds the following character
		//     "block"
		//  2. A vertical bar
		//     "bar"
		//  3. An underline / underscore that runs along the following character
		//     "underline"
		//  4. A box drawn around the following character
		//     "hollow"
		//
		// Default: not set, defaults to "block"
		"cursor_shape": null,
		// Set whether Alternate Scroll mode (code: ?1007) is active by default.
		// Alternate Scroll mode converts mouse scroll events into up / down key
		// presses when in the alternate screen (e.g. when running applications
		// like vim or  less). The terminal can still set and unset this mode.
		// May take 2 values:
		//  1. Default alternate scroll mode to on
		//         "alternate_scroll": "on",
		//  2. Default alternate scroll mode to off
		//         "alternate_scroll": "off",
		"alternate_scroll": "off",
		// Set whether the option key behaves as the meta key.
		// May take 2 values:
		//  1. Rely on default platform handling of option key, on macOS
		//     this means generating certain unicode characters
		//         "option_as_meta": false,
		//  2. Make the option keys behave as a 'meta' key, e.g. for emacs
		//         "option_as_meta": true,
		"option_as_meta": false,
		// Whether or not selecting text in the terminal will automatically
		// copy to the system clipboard.
		"copy_on_select": true,
		// Whether to show the terminal button in the status bar
		"button": true,
		"line_height": "comfortable",
		"toolbar": {
			// Whether to display the terminal title in its toolbar.
			"title": false
		}
	}
}
